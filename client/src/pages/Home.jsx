import React, { useState, useEffect } from 'react';
import { Loader, Card, FormField } from '../components';

/**
    这段代码定义了一个名为 RenderCards 的函数组件，它接受两个 props： data 和 title。
    如果 data 数组的长度大于 0，RenderCards 将返回一个由 data 中的每个元素映射为 Card 组件的数组，每个 Card 组件都有一个唯一的 key 属性，它是根据 post._id 生成的。
*/
const RenderCards = ({ data, title }) => {
    if(data?.length > 0) {
        return data.map((post) => <Card key={post._id} {...post} />)
    }
    return (
        <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}</h2>
    )
}

const Home = () => {
    /** 
        这段代码的作用是声明了两个 state 变量，用于在组件中记录页面加载状态和获取的帖子数据。这两个变量的值可以随着组件的生命周期和用户的操作进行更新。
    */
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null); 
  const [searchText, setSearchText] = useState('');

  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
        setLoading(true);

        try {
        //   const response = await fetch('https://dell-e-new.onrender.com/api/v1/post',{
        const response = await fetch('http://localhost:8080/api/v1/post',{
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })

          if(response.ok) {
            const result = await response.json();
            //reverse是保持最新的post在最顶上
            setAllPosts(result.data.reverse());
          }
        } catch (error) {
          alert(error);
        } finally {
          setLoading(false);
        }
    }
    fetchPosts();
  },[]); 

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    /*
        当搜索框的内容发生变化时，会调用这个函数。该函数会更新searchText的值，将其设置为搜索框的当前值e.target.value
    */
    setSearchText(e.target.value);

    setSearchTimeout(
        /*
            该回调函数会过滤allPosts数组中的元素，筛选出名称或提示文本中包含searchText的元素，并将结果存储在searchResults变量中。
        */
        setTimeout(() => {
            const searchResults = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));

            setSearchedResults(searchResults);
        },500)
    );  
}

  return (
    <section className="max-w-7xl mx-auto">
        <div>
            <h1 className="font-extrabold text-[@222328] test-[32px]">The Community ShowCase</h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-w[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E</p>
        </div>

        <div className='mt-16'>
            <FormField 
                labelName='Search posts'
                type='text'
                name='text'
                placeholder='Search posts'
                value={searchText}
                handleChange={handleSearchChange}
            />
        </div>

        {/* 
            open a dynamic block of code 
            we can check if we are loading. 
            如果loading为true，渲染一个包含Loader的组件的div元素，如果为false，则渲染一个包含searchText的标题和其他内容div元素。
        */}
        <div className='mt-10'>
            {loading ? (
                <div className='flex justify-center items-center'>
                <Loader />
                </div>
            ) : (
                <>
                    {/*
                        判断searchText是否存在，如果存在渲染一个标题，显示Showing results for ‘searchText’，如果不存在，不渲染任何文字。
                        span元素显示用户输入的搜索文本。
                    */}
                    {searchText && (
                        <h2 className='font-medium text-[#666e75] text-xl mb-3'>
                            Showing results for <span className='text-[#222328]'>{searchText}</span>
                        </h2>
                    )}
                    
                    <div className='grid lg:grid-cols-4 sm:grid-cols-3xs:grid-cols-2 grid-cols-1 gap-3'>
                        {searchText ? (
                            <RenderCards 
                                data={searchedResults}
                                title="No search results found"
                            />
                        ) : (
                            <RenderCards
                                data={allPosts}
                                title="No posts found"
                            />
                        )}
                    </div>
                </>
            )}
        </div>
    </section>
    
  )
}

export default Home